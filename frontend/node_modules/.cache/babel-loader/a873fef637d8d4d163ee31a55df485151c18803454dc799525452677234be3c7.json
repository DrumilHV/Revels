{"ast":null,"code":"var _jsxFileName = \"D:\\\\Revels\\\\Revels\\\\frontend\\\\src\\\\Scanner.js\";\n// import React from \"react\";\n// import QrScanner from \"qr-scanner\";\n// const imageScanner = document.getElementById(\"video\");\n// const Scan = () => {\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\n//     console.log(\"decoded qr code:\", result)\n//   );\n//   qrScanner.start();\n// };\n// const NoScan = () => {\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\n//     console.log(\"decoded qr code:\", result)\n//   );\n//   qrScanner.stop();\n// };\n// const Scanner = () => {\n//   return (\n//     <>\n//       <video id=\"video\"></video>\n//       <button onClick={Scan}>Scan</button>\n//       <button onClick={NoScan}>Stop</button>\n//     </>\n//   );\n// };\n\n// export default Scanner;\n\n// Drumil's Video code:\n// import React, { useRef, useEffect } from \"react\";\n// import QrScanner from \"qr-scanner\";\n\n// const Scanner = () => {\n//   const videoRef = useRef(null);\n\n//   const startScan = () => {\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\n//       console.log(\"decoded qr code:\", result)\n//     );\n//     qrScanner.start();\n//   };\n\n//   const stopScan = () => {\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\n//       console.log(\"decoded qr code:\", result)\n//     );\n//     qrScanner.stop();\n//   };\n\n//   useEffect(() => {\n//     startScan(); // Optionally start the scan when the component mounts\n//     return () => stopScan(); // Optionally stop the scan when the component unmounts\n//   }, []);\n\n//   return (\n//     <>\n//       <video ref={videoRef} autoPlay playsInline muted></video>\n//       <button onClick={startScan}>Scan</button>\n//       <button onClick={stopScan}>Stop</button>\n//     </>\n//   );\n// };\n\n// export default Scanner;\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Scanner = () => {\n  const handleImage = () => {\n    const reader = new FileReader();\n    reader.onload = () => {};\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"file\",\n      name: \"file\",\n      type: \"file\",\n      accept: \"image/png, image/jpeg\",\n      onChange: handleImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Scanner;\nexport default Scanner;\nvar _c;\n$RefreshReg$(_c, \"Scanner\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Scanner","handleImage","reader","FileReader","onload","children","id","name","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Revels/Revels/frontend/src/Scanner.js"],"sourcesContent":["// import React from \"react\";\r\n// import QrScanner from \"qr-scanner\";\r\n// const imageScanner = document.getElementById(\"video\");\r\n// const Scan = () => {\r\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\r\n//     console.log(\"decoded qr code:\", result)\r\n//   );\r\n//   qrScanner.start();\r\n// };\r\n// const NoScan = () => {\r\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\r\n//     console.log(\"decoded qr code:\", result)\r\n//   );\r\n//   qrScanner.stop();\r\n// };\r\n// const Scanner = () => {\r\n//   return (\r\n//     <>\r\n//       <video id=\"video\"></video>\r\n//       <button onClick={Scan}>Scan</button>\r\n//       <button onClick={NoScan}>Stop</button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Scanner;\r\n\r\n// Drumil's Video code:\r\n// import React, { useRef, useEffect } from \"react\";\r\n// import QrScanner from \"qr-scanner\";\r\n\r\n// const Scanner = () => {\r\n//   const videoRef = useRef(null);\r\n\r\n//   const startScan = () => {\r\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n//       console.log(\"decoded qr code:\", result)\r\n//     );\r\n//     qrScanner.start();\r\n//   };\r\n\r\n//   const stopScan = () => {\r\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n//       console.log(\"decoded qr code:\", result)\r\n//     );\r\n//     qrScanner.stop();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     startScan(); // Optionally start the scan when the component mounts\r\n//     return () => stopScan(); // Optionally stop the scan when the component unmounts\r\n//   }, []);\r\n\r\n//   return (\r\n//     <>\r\n//       <video ref={videoRef} autoPlay playsInline muted></video>\r\n//       <button onClick={startScan}>Scan</button>\r\n//       <button onClick={stopScan}>Stop</button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Scanner;\r\n\r\nimport React from \"react\";\r\n\r\nconst Scanner = () => {\r\n  const handleImage = () => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {};\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        id=\"file\"\r\n        name=\"file\"\r\n        type=\"file\"\r\n        accept=\"image/png, image/jpeg\"\r\n        onChange={handleImage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Scanner;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEP,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA;MACES,EAAE,EAAC,MAAM;MACTC,IAAI,EAAC,MAAM;MACXC,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,uBAAuB;MAC9BC,QAAQ,EAAET;IAAY;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB;EAAC,gBACF,CAAC;AAEP,CAAC;AAACC,EAAA,GAjBIf,OAAO;AAmBb,eAAeA,OAAO;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}