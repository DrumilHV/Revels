{"ast":null,"code":"var _jsxFileName = \"D:\\\\Revels\\\\Revels\\\\frontend\\\\src\\\\Scanner.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import QrScanner from \"qr-scanner\";\n// const imageScanner = document.getElementById(\"video\");\n// const Scan = () => {\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\n//     console.log(\"decoded qr code:\", result)\n//   );\n//   qrScanner.start();\n// };\n// const NoScan = () => {\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\n//     console.log(\"decoded qr code:\", result)\n//   );\n//   qrScanner.stop();\n// };\n// const Scanner = () => {\n//   return (\n//     <>\n//       <video id=\"video\"></video>\n//       <button onClick={Scan}>Scan</button>\n//       <button onClick={NoScan}>Stop</button>\n//     </>\n//   );\n// };\n\n// export default Scanner;\n\n// Drumil's Video code:\n// import React, { useRef, useEffect } from \"react\";\n// import QrScanner from \"qr-scanner\";\n\n// const Scanner = () => {\n//   const videoRef = useRef(null);\n\n//   const startScan = () => {\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\n//       console.log(\"decoded qr code:\", result)\n//     );\n//     try {\n//       if (!videoRef.current) {\n//         qrScanner.start();\n//       } else {\n//         qrScanner.stop();\n//         qrScanner.start();\n//       }\n//     } catch (error) {\n//       console.log(\"Error in startScan: \", error);\n//     }\n//   };\n\n//   const stopScan = () => {\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\n//       console.log(\"decoded qr code:\", result)\n//     );\n//     try {\n//       qrScanner.stop();\n//       qrScanner.destroy();\n//     } catch (error) {\n//       console.log(\"Error in stopScan: \", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     startScan(); // Optionally start the scan when the component mounts\n//     return () => {\n//       stopScan(); // Optionally stop the scan when the component unmounts\n//     };\n//   }, []);\n\n//   return (\n//     <>\n//       <video ref={videoRef} autoPlay playsInline muted></video>\n//       <button onClick={startScan}>Scan</button>\n//       <button onClick={stopScan}>Stop</button>\n//     </>\n//   );\n// };\n\n// export default Scanner;\n// ...................................................\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport QrScanner from \"qr-scanner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Scanner = () => {\n  _s();\n  const videoRef = useRef(null);\n  const [qrScanner, setQrScanner] = useState(null); // Store QrScanner instance\n\n  const startScan = () => {\n    if (!qrScanner) {\n      // Check if instance already exists\n      const newQrScanner = new QrScanner(videoRef.current, result => console.log(\"decoded qr code:\", result));\n      setQrScanner(newQrScanner);\n      newQrScanner.start().then(() => {\n        // Scan started successfully\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  };\n  const stopScan = () => {\n    if (qrScanner) {\n      qrScanner.stop();\n      setQrScanner(null); // Clear the stored instance\n    }\n  };\n  useEffect(() => {\n    startScan(); // Start scan on component mount\n    return () => stopScan(); // Stop scan on component unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startScan,\n      children: \"Scan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopScan,\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Scanner, \"rmdfeV1zTMcCfAEKF8DjJCZu0f4=\");\n_c = Scanner;\nexport default Scanner;\n// import React from \"react\";\n\n// const Scanner = () => {\n//   const handleImage = (e) => {\n//     const reader = new FileReader();\n//     reader.onload = () => {\n//       reader.readAsDataURL(e.target.files[0]);\n//     };\n//   };\n\n//   return (\n//     <>\n//       <input\n//         id=\"file\"\n//         name=\"file\"\n//         type=\"file\"\n//         accept=\"image/png, image/jpeg\"\n//         onChange={handleImage}\n//       />\n//     </>\n//   );\n// };\n\n// export default Scanner;\nvar _c;\n$RefreshReg$(_c, \"Scanner\");","map":{"version":3,"names":["React","useRef","useState","useEffect","QrScanner","jsxDEV","_jsxDEV","Fragment","_Fragment","Scanner","_s","videoRef","qrScanner","setQrScanner","startScan","newQrScanner","current","result","console","log","start","then","catch","error","stopScan","stop","children","ref","autoPlay","playsInline","muted","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Revels/Revels/frontend/src/Scanner.js"],"sourcesContent":["// import React from \"react\";\r\n// import QrScanner from \"qr-scanner\";\r\n// const imageScanner = document.getElementById(\"video\");\r\n// const Scan = () => {\r\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\r\n//     console.log(\"decoded qr code:\", result)\r\n//   );\r\n//   qrScanner.start();\r\n// };\r\n// const NoScan = () => {\r\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\r\n//     console.log(\"decoded qr code:\", result)\r\n//   );\r\n//   qrScanner.stop();\r\n// };\r\n// const Scanner = () => {\r\n//   return (\r\n//     <>\r\n//       <video id=\"video\"></video>\r\n//       <button onClick={Scan}>Scan</button>\r\n//       <button onClick={NoScan}>Stop</button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Scanner;\r\n\r\n// Drumil's Video code:\r\n// import React, { useRef, useEffect } from \"react\";\r\n// import QrScanner from \"qr-scanner\";\r\n\r\n// const Scanner = () => {\r\n//   const videoRef = useRef(null);\r\n\r\n//   const startScan = () => {\r\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n//       console.log(\"decoded qr code:\", result)\r\n//     );\r\n//     try {\r\n//       if (!videoRef.current) {\r\n//         qrScanner.start();\r\n//       } else {\r\n//         qrScanner.stop();\r\n//         qrScanner.start();\r\n//       }\r\n//     } catch (error) {\r\n//       console.log(\"Error in startScan: \", error);\r\n//     }\r\n//   };\r\n\r\n//   const stopScan = () => {\r\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n//       console.log(\"decoded qr code:\", result)\r\n//     );\r\n//     try {\r\n//       qrScanner.stop();\r\n//       qrScanner.destroy();\r\n//     } catch (error) {\r\n//       console.log(\"Error in stopScan: \", error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     startScan(); // Optionally start the scan when the component mounts\r\n//     return () => {\r\n//       stopScan(); // Optionally stop the scan when the component unmounts\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <>\r\n//       <video ref={videoRef} autoPlay playsInline muted></video>\r\n//       <button onClick={startScan}>Scan</button>\r\n//       <button onClick={stopScan}>Stop</button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Scanner;\r\n// ...................................................\r\n\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport QrScanner from \"qr-scanner\";\r\n\r\nconst Scanner = () => {\r\n  const videoRef = useRef(null);\r\n  const [qrScanner, setQrScanner] = useState(null); // Store QrScanner instance\r\n\r\n  const startScan = () => {\r\n    if (!qrScanner) {\r\n      // Check if instance already exists\r\n      const newQrScanner = new QrScanner(videoRef.current, (result) =>\r\n        console.log(\"decoded qr code:\", result)\r\n      );\r\n      setQrScanner(newQrScanner);\r\n      newQrScanner\r\n        .start()\r\n        .then(() => {\r\n          // Scan started successfully\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const stopScan = () => {\r\n    if (qrScanner) {\r\n      qrScanner.stop();\r\n      setQrScanner(null); // Clear the stored instance\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    startScan(); // Start scan on component mount\r\n    return () => stopScan(); // Stop scan on component unmount\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <video ref={videoRef} autoPlay playsInline muted></video>\r\n      <button onClick={startScan}>Scan</button>\r\n      <button onClick={stopScan}>Stop</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Scanner;\r\n// import React from \"react\";\r\n\r\n// const Scanner = () => {\r\n//   const handleImage = (e) => {\r\n//     const reader = new FileReader();\r\n//     reader.onload = () => {\r\n//       reader.readAsDataURL(e.target.files[0]);\r\n//     };\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <input\r\n//         id=\"file\"\r\n//         name=\"file\"\r\n//         type=\"file\"\r\n//         accept=\"image/png, image/jpeg\"\r\n//         onChange={handleImage}\r\n//       />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Scanner;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD,MAAMY,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,CAACF,SAAS,EAAE;MACd;MACA,MAAMG,YAAY,GAAG,IAAIX,SAAS,CAACO,QAAQ,CAACK,OAAO,EAAGC,MAAM,IAC1DC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CACxC,CAAC;MACDJ,YAAY,CAACE,YAAY,CAAC;MAC1BA,YAAY,CACTK,KAAK,CAAC,CAAC,CACPC,IAAI,CAAC,MAAM;QACV;MAAA,CACD,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;MACpB,CAAC,CAAC;IACN;EACF,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIZ,SAAS,EAAE;MACbA,SAAS,CAACa,IAAI,CAAC,CAAC;MAChBZ,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACtB;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdW,SAAS,CAAC,CAAC,CAAC,CAAC;IACb,OAAO,MAAMU,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElB,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACEpB,OAAA;MAAOqB,GAAG,EAAEhB,QAAS;MAACiB,QAAQ;MAACC,WAAW;MAACC,KAAK;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzD5B,OAAA;MAAQ6B,OAAO,EAAErB,SAAU;MAAAY,QAAA,EAAC;IAAI;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzC5B,OAAA;MAAQ6B,OAAO,EAAEX,QAAS;MAAAE,QAAA,EAAC;IAAI;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACxC,CAAC;AAEP,CAAC;AAACxB,EAAA,CAzCID,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AA2Cb,eAAeA,OAAO;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}