{"ast":null,"code":"var _jsxFileName = \"D:\\\\Revels\\\\Revels\\\\frontend\\\\src\\\\Scanner.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import QrScanner from \"qr-scanner\";\n// const imageScanner = document.getElementById(\"video\");\n// const Scan = () => {\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\n//     console.log(\"decoded qr code:\", result)\n//   );\n//   qrScanner.start();\n// };\n// const NoScan = () => {\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\n//     console.log(\"decoded qr code:\", result)\n//   );\n//   qrScanner.stop();\n// };\n// const Scanner = () => {\n//   return (\n//     <>\n//       <video id=\"video\"></video>\n//       <button onClick={Scan}>Scan</button>\n//       <button onClick={NoScan}>Stop</button>\n//     </>\n//   );\n// };\n\n// export default Scanner;\n\nimport React, { useRef, useEffect } from \"react\";\nimport QrScanner from \"qr-scanner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Scanner = () => {\n  _s();\n  const videoRef = useRef(null);\n  const startScan = () => {\n    const qrScanner = new QrScanner(videoRef.current, result => console.log(\"decoded qr code:\", result));\n    qrScanner.start();\n  };\n  const stopScan = () => {\n    const qrScanner = new QrScanner(videoRef.current, result => console.log(\"decoded qr code:\", result));\n    qrScanner.stop();\n  };\n  useEffect(() => {\n    startScan(); // Optionally start the scan when the component mounts\n    return () => stopScan(); // Optionally stop the scan when the component unmounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startScan,\n      children: \"Scan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopScan,\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Scanner, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = Scanner;\nexport default Scanner;\nvar _c;\n$RefreshReg$(_c, \"Scanner\");","map":{"version":3,"names":["React","useRef","useEffect","QrScanner","jsxDEV","_jsxDEV","Fragment","_Fragment","Scanner","_s","videoRef","startScan","qrScanner","current","result","console","log","start","stopScan","stop","children","ref","autoPlay","playsInline","muted","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Revels/Revels/frontend/src/Scanner.js"],"sourcesContent":["// import React from \"react\";\r\n// import QrScanner from \"qr-scanner\";\r\n// const imageScanner = document.getElementById(\"video\");\r\n// const Scan = () => {\r\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\r\n//     console.log(\"decoded qr code:\", result)\r\n//   );\r\n//   qrScanner.start();\r\n// };\r\n// const NoScan = () => {\r\n//   const qrScanner = new QrScanner(imageScanner, (result) =>\r\n//     console.log(\"decoded qr code:\", result)\r\n//   );\r\n//   qrScanner.stop();\r\n// };\r\n// const Scanner = () => {\r\n//   return (\r\n//     <>\r\n//       <video id=\"video\"></video>\r\n//       <button onClick={Scan}>Scan</button>\r\n//       <button onClick={NoScan}>Stop</button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Scanner;\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport QrScanner from \"qr-scanner\";\r\n\r\nconst Scanner = () => {\r\n  const videoRef = useRef(null);\r\n\r\n  const startScan = () => {\r\n    const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n      console.log(\"decoded qr code:\", result)\r\n    );\r\n    qrScanner.start();\r\n  };\r\n\r\n  const stopScan = () => {\r\n    const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n      console.log(\"decoded qr code:\", result)\r\n    );\r\n    qrScanner.stop();\r\n  };\r\n\r\n  useEffect(() => {\r\n    startScan(); // Optionally start the scan when the component mounts\r\n    return () => stopScan(); // Optionally stop the scan when the component unmounts\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <video ref={videoRef} autoPlay playsInline muted></video>\r\n      <button onClick={startScan}>Scan</button>\r\n      <button onClick={stopScan}>Stop</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Scanner;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,SAAS,GAAG,IAAIT,SAAS,CAACO,QAAQ,CAACG,OAAO,EAAGC,MAAM,IACvDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CACxC,CAAC;IACDF,SAAS,CAACK,KAAK,CAAC,CAAC;EACnB,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMN,SAAS,GAAG,IAAIT,SAAS,CAACO,QAAQ,CAACG,OAAO,EAAGC,MAAM,IACvDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CACxC,CAAC;IACDF,SAAS,CAACO,IAAI,CAAC,CAAC;EAClB,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdS,SAAS,CAAC,CAAC,CAAC,CAAC;IACb,OAAO,MAAMO,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACEf,OAAA;MAAOgB,GAAG,EAAEX,QAAS;MAACY,QAAQ;MAACC,WAAW;MAACC,KAAK;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzDvB,OAAA;MAAQwB,OAAO,EAAElB,SAAU;MAAAS,QAAA,EAAC;IAAI;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzCvB,OAAA;MAAQwB,OAAO,EAAEX,QAAS;MAAAE,QAAA,EAAC;IAAI;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACxC,CAAC;AAEP,CAAC;AAACnB,EAAA,CA7BID,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AA+Bb,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}