{"ast":null,"code":"var _jsxFileName = \"D:\\\\Revels\\\\Revels\\\\frontend\\\\src\\\\Scanner.js\";\nimport React from \"react\";\nimport QrScanner from \"qr-scanner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst imageScanner = document.getElementById(\"video\");\nconst Scan = () => {\n  const qrScanner = new QrScanner(imageScanner, result => console.log(\"decoded qr code:\", result));\n  qrScanner.start();\n};\n_c = Scan;\nconst NoScan = () => {\n  const qrScanner = new QrScanner(imageScanner, result => console.log(\"decoded qr code:\", result));\n  qrScanner.stop();\n};\n_c2 = NoScan;\nconst Scanner = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: Scan,\n      children: \"Scan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: NoScan,\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c3 = Scanner;\nexport default Scanner;\n\n// import React, { useRef, useEffect } from \"react\";\n// import QrScanner from \"qr-scanner\";\n\n// const Scanner = () => {\n//   const videoRef = useRef(null);\n\n//   const startScan = () => {\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\n//       console.log(\"decoded qr code:\", result)\n//     );\n//     qrScanner.start();\n//   };\n\n//   const stopScan = () => {\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\n//       console.log(\"decoded qr code:\", result)\n//     );\n//     qrScanner.stop();\n//   };\n\n//   useEffect(() => {\n//     startScan(); // Optionally start the scan when the component mounts\n//     return () => stopScan(); // Optionally stop the scan when the component unmounts\n//   }, []);\n\n//   return (\n//     <>\n//       <video ref={videoRef} autoPlay playsInline muted></video>\n//       <button onClick={startScan}>Scan</button>\n//       <button onClick={stopScan}>Stop</button>\n//     </>\n//   );\n// };\n\n// export default Scanner;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Scan\");\n$RefreshReg$(_c2, \"NoScan\");\n$RefreshReg$(_c3, \"Scanner\");","map":{"version":3,"names":["React","QrScanner","jsxDEV","_jsxDEV","Fragment","_Fragment","imageScanner","document","getElementById","Scan","qrScanner","result","console","log","start","_c","NoScan","stop","_c2","Scanner","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c3","$RefreshReg$"],"sources":["D:/Revels/Revels/frontend/src/Scanner.js"],"sourcesContent":["import React from \"react\";\r\nimport QrScanner from \"qr-scanner\";\r\nconst imageScanner = document.getElementById(\"video\");\r\nconst Scan = () => {\r\n  const qrScanner = new QrScanner(imageScanner, (result) =>\r\n    console.log(\"decoded qr code:\", result)\r\n  );\r\n  qrScanner.start();\r\n};\r\nconst NoScan = () => {\r\n  const qrScanner = new QrScanner(imageScanner, (result) =>\r\n    console.log(\"decoded qr code:\", result)\r\n  );\r\n  qrScanner.stop();\r\n};\r\nconst Scanner = () => {\r\n  return (\r\n    <>\r\n      <video id=\"video\"></video>\r\n      <button onClick={Scan}>Scan</button>\r\n      <button onClick={NoScan}>Stop</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Scanner;\r\n\r\n// import React, { useRef, useEffect } from \"react\";\r\n// import QrScanner from \"qr-scanner\";\r\n\r\n// const Scanner = () => {\r\n//   const videoRef = useRef(null);\r\n\r\n//   const startScan = () => {\r\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n//       console.log(\"decoded qr code:\", result)\r\n//     );\r\n//     qrScanner.start();\r\n//   };\r\n\r\n//   const stopScan = () => {\r\n//     const qrScanner = new QrScanner(videoRef.current, (result) =>\r\n//       console.log(\"decoded qr code:\", result)\r\n//     );\r\n//     qrScanner.stop();\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     startScan(); // Optionally start the scan when the component mounts\r\n//     return () => stopScan(); // Optionally stop the scan when the component unmounts\r\n//   }, []);\r\n\r\n//   return (\r\n//     <>\r\n//       <video ref={videoRef} autoPlay playsInline muted></video>\r\n//       <button onClick={startScan}>Scan</button>\r\n//       <button onClick={stopScan}>Stop</button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Scanner;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACnC,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;AACrD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB,MAAMC,SAAS,GAAG,IAAIT,SAAS,CAACK,YAAY,EAAGK,MAAM,IACnDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CACxC,CAAC;EACDD,SAAS,CAACI,KAAK,CAAC,CAAC;AACnB,CAAC;AAACC,EAAA,GALIN,IAAI;AAMV,MAAMO,MAAM,GAAGA,CAAA,KAAM;EACnB,MAAMN,SAAS,GAAG,IAAIT,SAAS,CAACK,YAAY,EAAGK,MAAM,IACnDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CACxC,CAAC;EACDD,SAAS,CAACO,IAAI,CAAC,CAAC;AAClB,CAAC;AAACC,GAAA,GALIF,MAAM;AAMZ,MAAMG,OAAO,GAAGA,CAAA,KAAM;EACpB,oBACEhB,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACEjB,OAAA;MAAOkB,EAAE,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1BtB,OAAA;MAAQuB,OAAO,EAAEjB,IAAK;MAAAW,QAAA,EAAC;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpCtB,OAAA;MAAQuB,OAAO,EAAEV,MAAO;MAAAI,QAAA,EAAC;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACtC,CAAC;AAEP,CAAC;AAACE,GAAA,GARIR,OAAO;AAUb,eAAeA,OAAO;;AAEtB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAJ,EAAA,EAAAG,GAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAb,EAAA;AAAAa,YAAA,CAAAV,GAAA;AAAAU,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}